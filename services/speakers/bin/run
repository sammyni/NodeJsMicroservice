#!/usr/bin/env node

const http = require('http');
const path = require('path');
const axios = require('axios');
const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

// Important - a service should not have a fixed port but should randomly choose one
// server.listen(process.env.PORT || 3000);
// Listen to any available port
server.listen(0);

server.on('listening', async () => {
  const serviceRegisterUrl = `${config.serviceRegistryHost}/register/${config.name}/${config.version}/${server.address().port}`;
  const registerService = () => axios.put(serviceRegisterUrl).catch(err => log.fatal(err));
  const unregisterService = () => axios.delete(serviceRegisterUrl).catch(err => log.fatal(err));

  registerService();
  const setServiceInterval = setInterval(registerService, 20000);

  const cleanUp = async () => {
    let isClean = false;
    if (!isClean) {
      isClean = true;
      clearInterval(setServiceInterval);
      await unregisterService();
    }
  };

  process.on('uncaughtException', async () => {
    await cleanUp();
    process.exit();
  });

  process.on('SIGINT', async () => {
    await cleanUp();
    process.exit();
  });

  process.on('SIGTERM', async () => {
    await cleanUp();
    process.exit();
  });
  log.info(
    `Speaker service listening on port ${server.address().port} in ${service.get('env')} mode.`,
  );
});
